# Sección 1: Protecciones contra Spoofing y Filtrado de Rutas
# Nota: 
# 0 = Falso
# 1 = Verdadero
# Estas evitan ataques de spoofing IP verificando rutas de paquetes.
# Impacto con VPN: Usa modo 'loose' (2) para compatibilidad con rutas asimétricas (comunes en VPNs como WireGuard/OpenVPN), evitando drops de conexión. Sin VPN: Podrías usar modo estricto (1) para más seguridad, pero loose es un buen balance general.
net.ipv4.conf.default.rp_filter=2
net.ipv4.conf.all.rp_filter=2

# Equivalentes para IPv6 (si IPv6 está activo).
# Impacto: Similar al IPv4; con VPN sobre IPv6, loose previene issues de routing. Sin VPN: Reduce riesgos en redes dual-stack.
net.ipv6.conf.default.rp_filter=2
net.ipv6.conf.all.rp_filter=2

# Sección 2: Protecciones contra Ataques DoS y SYN Floods
# Habilita SYN cookies para manejar floods TCP sin agotar recursos.
# Impacto con VPN: No afecta; mejora resiliencia en túneles VPN expuestos a tráfico malicioso. Sin VPN: Esencial en redes públicas para evitar DoS.
net.ipv4.tcp_syncookies=1

# Ignora broadcasts ICMP (anti-Smurf attack/DoS).
# Impacto: Universal; previene amplificación DoS vía ICMP, compatible con VPN (no interfiere en tunnels).
net.ipv4.icmp_echo_ignore_broadcasts=1

# Ignora respuestas de error ICMP bogus (previene side-channel attacks).
# Impacto: Mejora privacidad; con VPN, evita fugas de info fuera del túnel. Sin VPN: Reduce exposición directa.
net.ipv4.icmp_ignore_bogus_error_responses=1

# Sección 3: Manejo de Redirects ICMP y MITM
# Deshabilita aceptación de redirects ICMP para prevenir MITM (atacante redirige tráfico).
# Impacto con VPN: Seguro, ya que VPNs manejan routing internamente; evita redirects maliciosos fuera del túnel. Sin VPN: Crítico en LANs no confiables.
net.ipv4.conf.all.accept_redirects=0
net.ipv4.conf.default.accept_redirects=0

# Deshabilita envío de redirects ICMP (evita que tu máquina ayude en ataques o revele topología).
# Impacto: No afecta VPN; reduce fingerprinting de red en ambos casos.
net.ipv4.conf.all.send_redirects=0

# Equivalentes para IPv6.
# Impacto: Similar; deshabilita si IPv6 activo, para consistencia con/sin VPN.
net.ipv6.conf.all.accept_redirects=0
net.ipv6.conf.default.accept_redirects=0

# Sección 4: Forwarding y Routing Avanzado
# Deshabilita forwarding IP (tu máquina no actúa como router).
# Impacto con VPN: Para clientes VPN, =0 es ideal (evita forwarding accidental de tráfico VPN); si compartes VPN (raro), =1 con firewall estricto. Sin VPN: Siempre =0 para minimizar riesgos.
net.ipv4.ip_forward=0

# Deshabilita source routing (previene manipulación de rutas por atacantes).
# Impacto: Universal; con VPN, protege el túnel de rutas forzadas. Sin VPN: Evita ataques en redes abiertas.
net.ipv4.conf.all.accept_source_route=0
net.ipv4.conf.default.accept_source_route=0

# Equivalentes para IPv6.
net.ipv6.conf.all.accept_source_route=0
net.ipv6.conf.default.accept_source_route=0

# Sección 5: Logging y Detección
# Logea paquetes 'martians' (inválidos/spoofed).
# Impacto: Aumenta logs para detección; con VPN, ayuda a spotear intentos de spoofing en el túnel. Sin VPN: Útil para monitoreo en journalctl.
net.ipv4.conf.all.log_martians=0

# Sección 6: Protecciones contra Fingerprinting y Optimizaciones TCP
# Deshabilita timestamps TCP (reduce fingerprinting remoto de tu OS/clock).
# Impacto con VPN: Puede causar leve degradación en performance de conexiones TCP largas vía VPN (e.g., descargas); prueba y habilita si issues. Sin VPN: Mejora privacidad en conexiones directas.
net.ipv4.tcp_timestamps=0

# Habilita Selective ACK, D-SACK y FACK (mejora recovery en redes congestionadas, pero en hardening se habilita para eficiencia segura).
# Impacto: Generalmente positivo; con VPN, ayuda en tunnels con pérdida de paquetes. Sin VPN: Optimiza pero no es estrictamente seguridad.
net.ipv4.tcp_sack=1
net.ipv4.tcp_dsack=1
net.ipv4.tcp_fack=1

# Sección 7: Deshabilitar IPv6 si no se usa (reduce superficie de ataque)
# Si no necesitas IPv6 (común en desktops), deshabilítalo completamente.
# Impacto con VPN: Si tu VPN usa IPv6, deja =0; de lo contrario, =1 evita leaks IPv6 fuera del túnel. Sin VPN: =1 cierra vectores innecesarios.
net.ipv6.conf.all.disable_ipv6=0
net.ipv6.conf.default.disable_ipv6=0

# Sección 8: Protecciones de TTY y Line Disciplines
# Previene la carga automática de line disciplines en TTY (puede ser explotado para ejecución de código).
# Valor: 0 = Deshabilitar carga automática (recomendado para seguridad).
# Impacto: Sin efectos negativos en desktop; reduce superficie de ataque en interfaces TTY.
dev.tty.ldisc_autoload=0

# Sección 9: Protecciones de Sistemas de Archivos
# Protección contra manipulaciones maliciosas de archivos (ej: symlink attacks).
# Valores: 
# protected_fifos=2: Escritura restringida para FIFOs (solo propietario/root).
# protected_hardlinks=1: Impide creación de hardlinks a archivos sensibles.
# protected_regular=2: Escritura restringida para archivos regulares (solo propietario/root).
# protected_symlinks=1: Impide seguir symlinks en directorios no seguros.
# Impacto: Positivo para seguridad; aplicaciones Flatpak ya están aisladas, así que no deberían verse afectadas.
fs.protected_fifos=2
fs.protected_hardlinks=1
fs.protected_regular=2
fs.protected_symlinks=1

# Sección 10: Restricciones de Acceso al Kernel
# Restringe el acceso a dmesg (mensajes del kernel) solo a root.
# Valor: 1 = Restringido (recomendado para evitar fugas de información del kernel).
# Impacto: Necesitarás 'sudo' para ver dmesg, pero mejora la seguridad.
kernel.dmesg_restrict=1

# Deshabilita io_uring para usuarios no privilegiados (mitiga vulnerabilidades recientes).
# Valor: 2 = Deshabilitado para usuarios no privilegiados (recomendado).
# Impacto: Podría afectar aplicaciones de alto rendimiento que usen io_uring, pero raro en desktop.
kernel.io_uring_disabled=2

# Deshabilita kexec (evita que se reemplace el kernel en caliente).
# Valor: 1 = Deshabilitado (recomendado para seguridad, innecesario en desktop).
kernel.kexec_load_disabled=1

# Restringe la exposición de pointers del kernel (evita fugas de información).
# Valor: 2 = Oculta pointers siempre (recomendado para seguridad).
kernel.kptr_restrict=2

# Restringe el uso de eventos de rendimiento a root (previene side-channel attacks).
# Valor: 3 = Solo root (recomendado para seguridad; herramientas como 'perf' requerirán sudo).
kernel.perf_event_paranoid=3

# Prevenir exploits de use-after-free deshabilitando userfaultfd para no privilegiados.
# Valor: 0 = Deshabilitado (recomendado para seguridad).
# Impacto: Mitiga vulnerabilidades sin afectar usabilidad.
kernel.unprivileged_userfaultfd=0

# Deshabilitar fusión de slabs del kernel para dificultar exploits de heap overflow.
# Valor: 0 = Deshabilitado (recomendado).
# Impacto: Aumento mínimo de uso de memoria, pero mejora seguridad.
kernel.slab_merging=0

# Sección 11: Protecciones de Red y TCP Avanzadas
# Habilita protección contra time-wait assassination hazards en TCP.
# Valor: 1 = Habilitado (recomendado para robustez TCP).
net.ipv4.tcp_rfc1337=1

# Deshabilita shared media redirects (previene redirecciones no deseadas).
# Valor: 0 = Deshabilitado (recomendado para seguridad).
net.ipv4.conf.all.shared_media=0
net.ipv4.conf.default.shared_media=0

# Sección 12: Aleatorización de Memoria (ASLR)
# Aumenta la aleatorización de ASLR para mmap (hace más difícil exploits de memoria).
# Valores: 
# vm.mmap_rnd_bits=32: Para procesos de 64 bits (mayor aleatorización).
# vm.mmap_rnd_compat_bits=16: Para procesos de 32 bits en sistemas de 64 bits.
# Impacto: Mejora seguridad sin coste de rendimiento noticeable.
vm.mmap_rnd_bits=32
vm.mmap_rnd_compat_bits=16

# Sección 13: Protecciones BPF y User Namespaces (COMENTADAS - Potencialmente Peligrosas)
# Endurece el compilador JIT de BPF y deshabilita BPF para usuarios no privilegiados.
# Valores:
# net.core.bpf_jit_harden=2: Habilita hardening máximo (recomendado).
# kernel.unprivileged_bpf_disabled=1: Deshabilita BPF para usuarios no privilegiados (recomendado).
# Impacto: Herramientas como 'tcpdump' requerirán sudo, pero mejora seguridad.
net.core.bpf_jit_harden=2
kernel.unprivileged_bpf_disabled=1

# Deshabilita user namespaces para usuarios no privilegiados (¡ROMPE FLATPAK!).
# Valores:
# kernel.unprivileged_userns_clone=0: Deshabilita la creación de user namespaces no privilegiados.
# user.max_user_namespaces=0: Limita a cero los user namespaces.
# Impacto: Rompe aplicaciones Flatpak y contenedores. NO RECOMENDADO para si hay uso de Flatpaks o contenedores como Docker o Podman.
#kernel.unprivileged_userns_clone=0
#user.max_user_namespaces=0

# Restricciones de ptrace (para depuración).
# Valor: 1 = Restringido a procesos padres e hijos (recomendado para seguridad).
# Impacto: Podría afectar depuradores en VSCode, pero manejable.
kernel.yama.ptrace_scope=1

# Sección 14: Optimizaciones de Memoria y Swap
# Reduce la tendencia del kernel a usar swap (memoria en disco).
# Valor: 10 = Bajo uso de swap (recomendado para sistemas con ≥16GB RAM).
# Impacto: Mejor rendimiento si tienes RAM suficiente, pero podría aumentar presión de memoria si tienes poca RAM (<8GB).
vm.swappiness=10