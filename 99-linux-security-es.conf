# ==================================================================
# Ruta: /etc/sysctl.d/99-network-security-es.conf
# Archivo de configuración sysctl unificado y endurecido
# Optimizado para seguridad de escritorio con uso de VPN (WireGuard)
# ==================================================================

# Sección 1: Protecciones contra Spoofing y Filtrado de Rutas
# Nota: 
# 0 = Falso
# 1 = Verdadero
# Estas evitan ataques de spoofing IP verificando rutas de paquetes.
# Impacto con VPN: Se mantiene en modo 'loose' (2) para compatibilidad con rutas asimétricas (comunes en VPNs como WireGuard/OpenVPN), evitando drops de conexión.
net.ipv4.conf.default.rp_filter=2
net.ipv4.conf.all.rp_filter=2

# Equivalentes para IPv6 (si IPv6 está activo).
net.ipv6.conf.default.rp_filter=2
net.ipv6.conf.all.rp_filter=2

# Sección 2: Protecciones contra Ataques DoS, SYN Floods y Pings
# Habilita SYN cookies para manejar floods TCP sin agotar recursos.
net.ipv4.tcp_syncookies=1

# Ignora broadcasts ICMP (anti-Smurf attack/DoS).
net.ipv4.icmp_echo_ignore_broadcasts=1

# Ignora respuestas de error ICMP bogus (previene side-channel attacks).
net.ipv4.icmp_ignore_bogus_error_responses=1

# Ignora TODOS los pings (ICMP echo requests) para modo sigilo.
# Esto hace que tu máquina no responda a pings directos, haciéndola "invisible" a escaneos de red básicos.
# No afecta la conectividad de la VPN (que usa UDP).
net.ipv4.icmp_echo_ignore_all = 1
net.ipv6.icmp.echo_ignore_all = 1

# Sección 3: Manejo de Redirects ICMP y MITM
# Deshabilita aceptación de redirects ICMP para prevenir MITM (atacante redirige tráfico).
net.ipv4.conf.all.accept_redirects=0
net.ipv4.conf.default.accept_redirects=0

# Deshabilita envío de redirects ICMP (evita que tu máquina ayude en ataques o revele topología).
net.ipv4.conf.all.send_redirects=0

# Equivalentes para IPv6.
net.ipv6.conf.all.accept_redirects=0
net.ipv6.conf.default.accept_redirects=0

# Sección 4: Forwarding y Routing Avanzado
# Deshabilita forwarding IP (tu máquina no actúa como router).
net.ipv4.ip_forward=0

# Deshabilita source routing (previene manipulación de rutas por atacantes).
net.ipv4.conf.all.accept_source_route=0
net.ipv4.conf.default.accept_source_route=0

# Equivalentes para IPv6.
net.ipv6.conf.all.accept_source_route=0
net.ipv6.conf.default.accept_source_route=0

# Sección 5: Logging y Detección
# Logea paquetes 'martians' (inválidos/spoofed).
# Se activa (=1) para registrar intentos de spoofing en los logs del kernel (visto con 'dmesg' o 'journalctl -k').
# Ayuda a la detección de anomalías sin impacto en el rendimiento.
net.ipv4.conf.all.log_martians=1

# Sección 6: Protecciones contra Fingerprinting y Optimizaciones TCP
# Deshabilita timestamps TCP (reduce fingerprinting remoto de tu OS/clock).
net.ipv4.tcp_timestamps=0

# Deshabilita SACK/DSACK (prioriza seguridad sobre rendimiento).
# Esto reduce la superficie de ataque del kernel. Puede reducir levemente el rendimiento en redes CON MUCHA pérdida de paquetes, pero es más seguro.
net.ipv4.tcp_sack=0
net.ipv4.tcp_dsack=0
# net.ipv4.tcp_fack=1 (Eliminado, ya que FACK depende de SACK para funcionar)

# Sección 7: Configuraciones de IPv6
# Deshabilitar IPv6 si no se usa (reduce superficie de ataque).
# Se mantiene en =0 para compatibilidad con VPNs que usen IPv6.
net.ipv6.conf.all.disable_ipv6=0
net.ipv6.conf.default.disable_ipv6=0

# Habilita extensiones de privacidad IPv6 (RFC 4941).
# Genera direcciones IPv6 temporales y aleatorias para conexiones salientes, evitando que tu MAC sea usada
# y mejorando drásticamente la privacidad contra el rastreo en redes IPv6.
net.ipv6.conf.all.use_tempaddr = 2
net.ipv6.conf.default.use_tempaddr = 2

# Sección 8: Protecciones de TTY y Line Disciplines
# Previene la carga automática de line disciplines en TTY (puede ser explotado para ejecución de código).
dev.tty.ldisc_autoload=0

# Sección 9: Protecciones de Sistemas de Archivos
# Protección contra manipulaciones maliciosas de archivos (ej: symlink attacks).
fs.protected_fifos=2
fs.protected_hardlinks=1
fs.protected_regular=2
fs.protected_symlinks=1

# Deshabilita binfmt_misc para reducir la superficie de ataque del kernel.
# Este módulo se usa para ejecutar binarios no nativos (como WINE).
# Si no usas WINE o QEMU, deshabilitarlo (=0) cierra un vector de ataque.
fs.binfmt_misc.status = 0

# Previene que procesos con privilegios (SUID) creen "core dumps".
# Los core dumps (volcados de memoria) pueden contener información sensible.
fs.suid_dumpable = 0

# Sección 10: Restricciones de Acceso al Kernel y Fugas de Información
# Restringe el acceso a dmesg (mensajes del kernel) solo a root.
kernel.dmesg_restrict=1

# Deshabilita io_uring para usuarios no privilegiados (mitiga vulnerabilidades recientes).
kernel.io_uring_disabled=2

# Deshabilita kexec (evita que se reemplace el kernel en caliente).
kernel.kexec_load_disabled=1

# Restringe la exposición de pointers del kernel (evita fugas de información).
kernel.kptr_restrict=2

# Restringe el uso de eventos de rendimiento a root (previene side-channel attacks).
kernel.perf_event_paranoid=3

# Prevenir exploits de use-after-free deshabilitando userfaultfd para no privilegiados.
vm.unprivileged_userfaultfd=0

# Deshabilitar fusión de slabs del kernel para dificultar exploits de heap overflow.
kernel.slab_merging=0

# Deshabilita la "Magic SysRq key" para seguridad física.
# Impide que alguien con acceso físico al teclado fuerce reinicios o volcados de memoria.
kernel.sysrq = 0

# Controla los límites de logs y pánicos del kernel.
# Limita el "ruido" de oops/warn y previene reinicios automáticos en un "kernel panic".
kernel.oops_limit=100
kernel.warn_limit=100
kernel.panic=-1 
# (-1 = no reiniciar nunca automáticamente)

# Reduce la verbosidad del kernel en la consola.
# Evita fugas de información del kernel en la consola física durante el arranque.
kernel.printk = 3 3 3 3

# Deshabilita los "core dumps" (volcados de memoria) globalmente.
# Previene que la memoria de un programa que crashea (que puede tener claves, etc.) se escriba en disco.
kernel.core_pattern = |/bin/false

# Sección 11: Protecciones de Red y TCP Avanzadas
# Habilita protección contra time-wait assassination hazards en TCP.
net.ipv4.tcp_rfc1337=1

# Deshabilita shared media redirects (previene redirecciones no deseadas).
net.ipv4.conf.all.shared_media=0
net.ipv4.conf.default.shared_media=0

# Endurecimiento contra ARP Spoofing en la red local (LAN).
# arp_filter: Permite filtrar respuestas ARP basadas en la IP de la interfaz.
# arp_ignore: Ignora peticiones ARP para IPs que no están en esta máquina.
# drop_gratuitous_arp: Descarta anuncios ARP no solicitados.
# Protegen contra ataques MITM en tu red local (ej. WiFi pública).
net.ipv4.conf.*.arp_filter = 1
net.ipv4.conf.*.arp_ignore = 2
net.ipv4.conf.all.drop_gratuitous_arp = 1

# Sección 12: Aleatorización de Memoria (ASLR)
# Aumenta la aleatorización de ASLR para mmap (hace más difícil exploits de memoria).
vm.mmap_rnd_bits=32
vm.mmap_rnd_compat_bits=16

# Sección 13: Protecciones BPF
# Endurece el compilador JIT de BPF y deshabilita BPF para usuarios no privilegiados.
net.core.bpf_jit_harden=2
kernel.unprivileged_bpf_disabled=1

# Restricciones de ptrace (para depuración).
kernel.yama.ptrace_scope=1

# (OPCIONAL - SOLO PARA USUARIOS AVANZADOS) Deshabilitar User Namespaces
# ADVERTENCIA: Habilitar estas reglas (quitar el '#') aumenta masivamente la 
# seguridad contra la escalada de privilegios al reducir la superficie de ataque del kernel.
#
# ¡¡¡PELIGRO!!!: Esto ROMPERÁ COMPLETAMENTE todas las aplicaciones Flatpak,
# contenedores Docker, Podman y cualquier otra tecnología de sandboxing 
# que dependa de 'user namespaces'.
# NO HABILITAR a menos que sepas lo que haces y no uses contenedores.
#
# kernel.unprivileged_userns_clone=0
# user.max_user_namespaces=0

# Sección 14: Optimizaciones de Memoria y Swap
# Reduce la tendencia del kernel a usar swap (memoria en disco).
# Valores altos: 60 - 100
# Valores lazy: 1 - 20
# Valor NoSwap: 0 (no usará nada de memoria swap a menos que sea la única forma de evitar un colapso de sistema)
vm.swappiness=20
