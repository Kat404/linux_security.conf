# Section 1: Anti-Spoofing and Route Filtering Protections
# Note: 
# 0 = False
# 1 = True
# These prevent IP spoofing attacks by verifying packet routes.
# VPN Impact: Use 'loose' mode (2) for compatibility with asymmetric routes (common in VPNs like WireGuard/OpenVPN), avoiding connection drops. Without VPN: You could use strict mode (1) for more security, but loose is a good general balance.
net.ipv4.conf.default.rp_filter=2
net.ipv4.conf.all.rp_filter=2

# IPv6 equivalents (if IPv6 is active).
# Impact: Similar to IPv4; with VPN over IPv6, loose prevents routing issues. Without VPN: Reduces risks in dual-stack networks.
net.ipv6.conf.default.rp_filter=2
net.ipv6.conf.all.rp_filter=2

# Section 2: DoS and SYN Floods Protection
# Enables SYN cookies to handle TCP floods without exhausting resources.
# VPN Impact: No effect; improves resilience in VPN tunnels exposed to malicious traffic. Without VPN: Essential in public networks to prevent DoS.
net.ipv4.tcp_syncookies=1

# Ignores ICMP broadcasts (anti-Smurf attack/DoS).
# Impact: Universal; prevents DoS amplification via ICMP, VPN compatible (doesn't interfere with tunnels).
net.ipv4.icmp_echo_ignore_broadcasts=1

# Ignores bogus ICMP error responses (prevents side-channel attacks).
# Impact: Enhances privacy; with VPN, prevents info leaks outside the tunnel. Without VPN: Reduces direct exposure.
net.ipv4.icmp_ignore_bogus_error_responses=1

# Section 3: ICMP Redirects and MITM Handling
# Disables ICMP redirects acceptance to prevent MITM (attacker redirecting traffic).
# VPN Impact: Safe, as VPNs handle routing internally; prevents malicious redirects outside the tunnel. Without VPN: Critical in untrusted LANs.
net.ipv4.conf.all.accept_redirects=0
net.ipv4.conf.default.accept_redirects=0

# Disables ICMP redirects sending (prevents your machine from helping in attacks or revealing topology).
# Impact: Doesn't affect VPN; reduces network fingerprinting in both cases.
net.ipv4.conf.all.send_redirects=0

# IPv6 equivalents.
# Impact: Similar; disable if IPv6 is active, for consistency with/without VPN.
net.ipv6.conf.all.accept_redirects=0
net.ipv6.conf.default.accept_redirects=0

# Section 4: Advanced Forwarding and Routing
# Disables IP forwarding (your machine doesn't act as a router).
# VPN Impact: For VPN clients, =0 is ideal (prevents accidental VPN traffic forwarding); if sharing VPN (rare), =1 with strict firewall. Without VPN: Always =0 to minimize risks.
net.ipv4.ip_forward=0

# Disables source routing (prevents route manipulation by attackers).
# Impact: Universal; with VPN, protects tunnel from forced routes. Without VPN: Prevents attacks in open networks.
net.ipv4.conf.all.accept_source_route=0
net.ipv4.conf.default.accept_source_route=0

# IPv6 equivalents.
net.ipv6.conf.all.accept_source_route=0
net.ipv6.conf.default.accept_source_route=0

# Section 5: Logging and Detection
# Logs 'martian' packets (invalid/spoofed).
# Impact: Increases logs for detection; with VPN, helps spot spoofing attempts in the tunnel. Without VPN: Useful for monitoring in journalctl.
net.ipv4.conf.all.log_martians=0

# Section 6: Anti-Fingerprinting and TCP Optimizations
# Disables TCP timestamps (reduces remote OS/clock fingerprinting).
# VPN Impact: May cause slight performance degradation in long TCP connections via VPN (e.g., downloads); test and enable if issues arise. Without VPN: Improves privacy in direct connections.
net.ipv4.tcp_timestamps=0

# Enables Selective ACK, D-SACK, and FACK (improves recovery in congested networks, enabled in hardening for secure efficiency).
# Impact: Generally positive; with VPN, helps in tunnels with packet loss. Without VPN: Optimizes but isn't strictly security.
net.ipv4.tcp_sack=1
net.ipv4.tcp_dsack=1
net.ipv4.tcp_fack=1

# Section 7: Disable IPv6 if unused (reduces attack surface)
# If you don't need IPv6 (common in desktops), disable it completely.
# VPN Impact: If your VPN uses IPv6, leave =0; otherwise, =1 prevents IPv6 leaks outside the tunnel. Without VPN: =1 closes unnecessary vectors.
net.ipv6.conf.all.disable_ipv6=0
net.ipv6.conf.default.disable_ipv6=0

# Section 8: TTY and Line Disciplines Protections
# Prevents automatic loading of line disciplines in TTY (can be exploited for code execution).
# Value: 0 = Disable autoloading (recommended for security).
# Impact: No negative effects on desktop; reduces attack surface on TTY interfaces.
dev.tty.ldisc_autoload=0

# Section 9: Filesystem Protections
# Protection against malicious file manipulations (e.g., symlink attacks).
# Values: 
# protected_fifos=2: Restricted write access to FIFOs (owner/root only).
# protected_hardlinks=1: Prevents creation of hardlinks to sensitive files.
# protected_regular=2: Restricted write access to regular files (owner/root only).
# protected_symlinks=1: Prevents following symlinks in unsafe directories.
# Impact: Positive for security; Flatpak applications are already isolated and shouldn't be affected.
fs.protected_fifos=2
fs.protected_hardlinks=1
fs.protected_regular=2
fs.protected_symlinks=1

# Section 10: Kernel Access Restrictions
# Restricts dmesg (kernel messages) access to root only.
# Value: 1 = Restricted (recommended to prevent kernel information leaks).
# Impact: You'll need 'sudo' to view dmesg, but improves security.
kernel.dmesg_restrict=1

# Disables io_uring for unprivileged users (mitigates recent vulnerabilities).
# Value: 2 = Disabled for unprivileged users (recommended).
# Impact: Might affect high-performance applications using io_uring, but rare on desktop.
kernel.io_uring_disabled=2

# Disables kexec (prevents hot-replacing the running kernel).
# Value: 1 = Disabled (recommended for security, unnecessary on desktop).
kernel.kexec_load_disabled=1

# Restricts exposure of kernel pointers (prevents information leaks).
# Value: 2 = Always hide pointers (recommended for security).
kernel.kptr_restrict=2

# Restricts performance events to root (prevents side-channel attacks).
# Value: 3 = Root only (recommended for security; tools like 'perf' will require sudo).
kernel.perf_event_paranoid=3

# Prevents use-after-free exploits by disabling userfaultfd for unprivileged users.
# Value: 0 = Disabled (recommended for security).
# Impact: Mitigates vulnerabilities without affecting usability.
kernel.unprivileged_userfaultfd=0

# Disables kernel slab merging to make heap overflow exploits harder.
# Value: 0 = Disabled (recommended).
# Impact: Minimal memory usage increase, but improves security.
kernel.slab_merging=0

# Section 11: Advanced Network and TCP Protections
# Enables protection against time-wait assassination hazards in TCP.
# Value: 1 = Enabled (recommended for TCP robustness).
net.ipv4.tcp_rfc1337=1

# Disables shared media redirects (prevents unwanted redirects).
# Value: 0 = Disabled (recommended for security).
net.ipv4.conf.all.shared_media=0
net.ipv4.conf.default.shared_media=0

# Section 12: Memory Randomization (ASLR)
# Increases ASLR randomization for mmap (makes memory exploits harder).
# Values: 
# vm.mmap_rnd_bits=32: For 64-bit processes (greater randomization).
# vm.mmap_rnd_compat_bits=16: For 32-bit processes on 64-bit systems.
# Impact: Improves security with no noticeable performance cost.
vm.mmap_rnd_bits=32
vm.mmap_rnd_compat_bits=16

# Section 13: BPF and User Namespaces Protections (COMMENTED - Potentially Dangerous)
# Hardens BPF JIT compiler and disables BPF for unprivileged users.
# Values:
# net.core.bpf_jit_harden=2: Enables maximum hardening (recommended).
# kernel.unprivileged_bpf_disabled=1: Disables BPF for unprivileged users (recommended).
# Impact: Tools like 'tcpdump' will require sudo, but improves security.
net.core.bpf_jit_harden=2
kernel.unprivileged_bpf_disabled=1

# Disables user namespaces for unprivileged users (BREAKS FLATPAK!).
# Values:
# kernel.unprivileged_userns_clone=0: Disables unprivileged user namespaces.
# user.max_user_namespaces=0: Limits user namespaces to zero.
# Impact: Breaks Flatpak applications and containers. NOT RECOMMENDED if using Flatpaks or containers like Docker/Podman.
#kernel.unprivileged_userns_clone=0
#user.max_user_namespaces=0

# ptrace restrictions (for debugging).
# Value: 1 = Restricted to parent and child processes (recommended for security).
# Impact: Might affect debuggers in VSCode, but manageable.
kernel.yama.ptrace_scope=1

# Section 14: Memory and Swap Optimizations
# Reduces kernel's tendency to use swap (disk memory).
# Value: 10 = Low swap usage (recommended for systems with â‰¥16GB RAM).
# Impact: Better performance with sufficient RAM, but might increase memory pressure with low RAM (<8GB).
vm.swappiness=10