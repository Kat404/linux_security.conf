# ==================================================================
# Path: /etc/sysctl.d/99-network-security.conf
# Hardened, unified sysctl configuration
# Optimized for desktop security with VPN usage (WireGuard)
# ==================================================================

# Section 1: Anti-Spoofing and Route Filtering
# Note:
# 0 = False
# 1 = True
# These prevent IP spoofing attacks by verifying packet routes.
# VPN impact: Kept in 'loose' mode (2) for compatibility with asymmetric routing (common with VPNs like WireGuard/OpenVPN), avoiding connection drops.
net.ipv4.conf.default.rp_filter=2
net.ipv4.conf.all.rp_filter=2

# IPv6 equivalents (if IPv6 is active).
net.ipv6.conf.default.rp_filter=2
net.ipv6.conf.all.rp_filter=2

# Section 2: Protections against DoS, SYN Floods and Pings
# Enable SYN cookies to handle TCP floods without exhausting resources.
net.ipv4.tcp_syncookies=1

# Ignore ICMP broadcasts (anti-Smurf attack/DoS).
net.ipv4.icmp_echo_ignore_broadcasts=1

# Ignore bogus ICMP error responses (prevents side-channel attacks).
net.ipv4.icmp_ignore_bogus_error_responses=1

# Ignore ALL pings (ICMP echo requests) for stealth mode.
# This makes your machine not respond to direct pings, making it "invisible" to basic network scans.
# Does not affect VPN connectivity (which uses UDP).
net.ipv4.icmp_echo_ignore_all = 1
net.ipv6.icmp.echo_ignore_all = 1

# Section 3: Handling ICMP Redirects and MITM
# Disable acceptance of ICMP redirects to prevent MITM (attacker redirects traffic).
net.ipv4.conf.all.accept_redirects=0
net.ipv4.conf.default.accept_redirects=0

# Disable sending ICMP redirects (prevents your machine from aiding attacks or revealing topology).
net.ipv4.conf.all.send_redirects=0

# IPv6 equivalents.
net.ipv6.conf.all.accept_redirects=0
net.ipv6.conf.default.accept_redirects=0

# Section 4: Forwarding and Advanced Routing
# Disable IP forwarding (your machine does not act as a router).
net.ipv4.ip_forward=0

# Disable source routing (prevents route manipulation by attackers).
net.ipv4.conf.all.accept_source_route=0
net.ipv4.conf.default.accept_source_route=0

# IPv6 equivalents.
net.ipv6.conf.all.accept_source_route=0
net.ipv6.conf.default.accept_source_route=0

# Section 5: Logging and Detection
# Log 'martian' packets (invalid/spoofed).
# Enabled (=1) to log spoofing attempts in kernel logs (view with 'dmesg' or 'journalctl -k').
# Helps anomaly detection with no performance impact.
net.ipv4.conf.all.log_martians=1

# Section 6: Anti-Fingerprinting and TCP Optimizations
# Disable TCP timestamps (reduces remote fingerprinting of your OS/clock).
net.ipv4.tcp_timestamps=0

# Disable SACK/DSACK (prioritize security over performance).
# This reduces the kernel's attack surface. It may slightly reduce performance on networks WITH A LOT of packet loss, but is safer.
net.ipv4.tcp_sack=0
net.ipv4.tcp_dsack=0
# net.ipv4.tcp_fack=1 (Removed, since FACK depends on SACK to work)

# Section 7: IPv6 Settings
# Disable IPv6 if not used (reduces attack surface).
# Kept at =0 for compatibility with VPNs that use IPv6.
net.ipv6.conf.all.disable_ipv6=0
net.ipv6.conf.default.disable_ipv6=0

# Enable IPv6 privacy extensions (RFC 4941).
# Generates temporary, random IPv6 addresses for outbound connections, avoiding use of your MAC
# and greatly improving privacy against tracking on IPv6 networks.
net.ipv6.conf.all.use_tempaddr = 2
net.ipv6.conf.default.use_tempaddr = 2

# Section 8: TTY and Line Discipline Protections
# Prevent automatic loading of TTY line disciplines (can be exploited for code execution).
dev.tty.ldisc_autoload=0

# Section 9: Filesystem Protections
# Protection against malicious file manipulation (e.g., symlink attacks).
fs.protected_fifos=2
fs.protected_hardlinks=1
fs.protected_regular=2
fs.protected_symlinks=1

# Disable binfmt_misc to reduce the kernel attack surface.
# This module is used to run non-native binaries (such as WINE).
# If you don't use WINE or QEMU, disabling it (=0) closes an attack vector.
fs.binfmt_misc.status = 0

# Prevent privileged (SUID) processes from creating core dumps.
# Core dumps (memory dumps) can contain sensitive information.
fs.suid_dumpable = 0

# Section 10: Kernel Access Restrictions and Information Leaks
# Restrict access to dmesg (kernel messages) to root only.
kernel.dmesg_restrict=1

# Disable io_uring for unprivileged users (mitigates recent vulnerabilities).
kernel.io_uring_disabled=2

# Disable kexec (prevents hot-replacing the kernel).
kernel.kexec_load_disabled=1

# Restrict exposure of kernel pointers (prevents information leaks).
kernel.kptr_restrict=2

# Restrict the use of performance events to root (prevents side-channel attacks).
kernel.perf_event_paranoid=3

# Prevent use-after-free exploits by disabling userfaultfd for unprivileged users.
vm.unprivileged_userfaultfd=0

# Disable kernel slab merging to make heap overflow exploits harder.
kernel.slab_merging=0

# Disable the "Magic SysRq key" for physical security.
# Prevents someone with physical keyboard access from forcing reboots or memory dumps.
kernel.sysrq = 0

# Control kernel log and panic limits.
# Limits oops/warn "noise" and prevents automatic reboots on "kernel panic".
kernel.oops_limit=100
kernel.warn_limit=100
kernel.panic=-1 
# (-1 = never automatically reboot)

# Reduce kernel verbosity on the console.
# Prevents kernel information leaks to the physical console during boot.
kernel.printk = 3 3 3 3

# Disable global "core dumps".
# Prevents writing the memory of a crashing program (which may contain keys, etc.) to disk.
kernel.core_pattern = |/bin/false

# Section 11: Advanced Network and TCP Protections
# Enable protection against TCP time-wait assassination hazards.
net.ipv4.tcp_rfc1337=1

# Disable shared media redirects (prevents unwanted redirects).
net.ipv4.conf.all.shared_media=0
net.ipv4.conf.default.shared_media=0

# Hardening against ARP spoofing on the local network (LAN).
# arp_filter: Filter ARP responses based on the interface IP.
# arp_ignore: Ignore ARP requests for IPs not on this machine.
# drop_gratuitous_arp: Drop unsolicited ARP announcements.
# Protect against MITM attacks on your local network (e.g., public WiFi).
net.ipv4.conf.*.arp_filter = 1
net.ipv4.conf.*.arp_ignore = 2
net.ipv4.conf.all.drop_gratuitous_arp = 1

# Section 12: Address Space Layout Randomization (ASLR)
# Increase ASLR randomization for mmap (makes memory exploits harder).
vm.mmap_rnd_bits=32
vm.mmap_rnd_compat_bits=16

# Section 13: BPF Protections
# Harden the BPF JIT compiler and disable BPF for unprivileged users.
net.core.bpf_jit_harden=2
kernel.unprivileged_bpf_disabled=1

# ptrace restrictions (for debugging).
kernel.yama.ptrace_scope=1

# (OPTIONAL - ADVANCED USERS ONLY) Disable User Namespaces
# WARNING: Enabling these rules (remove the '#') massively increases
# security against privilege escalation by reducing the kernel attack surface.
#
# DANGER!!!: This will COMPLETELY BREAK all Flatpak applications,
# Docker, Podman containers, and any other sandboxing technology
# that relies on 'user namespaces'.
# DO NOT ENABLE unless you know what you're doing and don't use containers.
#
# kernel.unprivileged_userns_clone=0
# user.max_user_namespaces=0

# Section 14: Memory and Swap Optimizations
# Reduce the kernel's tendency to use swap (disk-backed memory).
# High values: 60 - 100
# Lazy values: 1 - 20
# NoSwap value: 0 (will not use any swap unless it's the only way to avoid a system crash)
vm.swappiness=20
